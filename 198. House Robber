/*
198. House Robber
假设你是一位专业的盗贼计划打劫沿一条街的房子，
每个房子藏着一定数额的钱，你不能同时打劫相邻的两个房子，
因为会报警，求一晚上能打劫到的最多钱。
Example 1:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
			 
原题链接：https://leetcode.com/problems/house-robber/
*/

//解决思路：动态规划
/*本质相当于在一列数组中取出一个或多个不相邻数，使其和最大。

State: dp[i]，表示到第i个房子时能够抢到的最大金额。

Function: dp[i] = max(num[i] + dp[i - 2], dp[i - 1])

Initialize: dp[0] = num[0], dp[1] = max(num[0], num[1]) 或者 dp[0] = 0, dp[1] = 0

Return: dp[n]*/


//代码
public class Solution {
    public int rob(int[] nums) {
        if(nums.length <= 1){
            return nums.length == 0 ? 0 : nums[0];
        }
        // a是上次的最大收益
        int a = nums[0];
        // b是当前的最大受益
        int b = Math.max(nums[0], nums[1]);
        for(int i = 2; i < nums.length; i++){
            int tmp = b;
            // 当前的最大收益是两种选择里较大的那个
            b = Math.max(a + nums[i], b);
            a = tmp;
        }
        return b;
    }
}