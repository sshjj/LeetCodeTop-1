/*
155. Min Stack
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
原题链接：https://leetcode.com/problems/min-stack
*/

//解决思路：解法1：使用2个栈，栈1记录进来的数，栈2记录目前的最小值。当有新数push进来的时候，
如果栈2为空或者这个数小于栈2顶上的值，就把这个数推入栈2。
当pop的数正好等于最小值时，说明当前栈内的最小值变化了，要弹出这个最小值，记录的下一个最小值来到栈顶。

解法2：只使用1个栈，用一个变量min_val记录当前的最小值，将当前最小值一同入栈，为节省空间，
仅在当前最小值更改时才入栈。所以该栈的push和pop实际上可能是两次。当新进来的数小于min_val时，
把当前的min_val和新进来的数一起推入到栈，min_val变为这个新进来的数。
当pop栈顶元素的时候，如果栈顶元素的值和min_val相等，那么就把它下面记录的之前最小值赋给min_val并弹出。

解法3：也是使用1个栈，但栈中存的是当前值与最小值的差，用一个元素来记录，然后根据这个值可以计算出当前值和最小值。
当栈顶元素为正时，表示当前元素比最小元素大，当前值为最小值+差值；当栈顶元素为负时，
其表示的是当前元素值比之前最小值小，现在的最小值就是元素值。


//代码
class MinStack {

    private int min_val=Integer.MAX_VALUE;
    private Stack<Integer> s=new Stack<>();
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        if(x<=min_val){
            s.push(min_val);
            min_val=x;
        }
        s.push(x);
        
    }
    
    public void pop() {
        if(s.pop()==min_val) min_val=s.pop();
    }
    
    public int top() {
        return s.peek();
        
    }
    
    public int getMin() {
        return min_val;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */